# -*- coding: utf-8 -*-
"""Position Paper_AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aJoIKYQ7jRvUg_gevzPpXcu2R-FYnL9H
"""

#importing libraries
import numpy as np 
import pandas as pd 
import os

ds = pd.read_csv('/content/Best Movies Netflix.csv')
ds

# Checking null values and Datatype of each column 
ds.info()

#Best Show by Year on netflix
ds2 = pd.read_csv('/content/Best Shows Netflix.csv',index_col = "index")
ds2

ds2.info()

# Sorting index 
ds.sort_index()

# fill missing values in df1
ds = pd.read_csv('/content/Best Movies Netflix.csv')
ds['TITLE'] = ds['TITLE'].fillna(' ')
ds['RELEASE_YEAR'] = ds['RELEASE_YEAR'].fillna(' ')
ds['MAIN_PRODUCTION'] = ds['MAIN_PRODUCTION'].fillna(' ')
ds.to_csv('/content/Best Movies Netflix.csv', index=False)
# fill missing values in df2
ds2 = pd.read_csv('/content/Best Shows Netflix.csv')
ds2['TITLE'] = ds2['TITLE'].fillna(' ')
ds2['RELEASE_YEAR'] = ds2['RELEASE_YEAR'].fillna(' ')
ds2['MAIN_PRODUCTION'] = ds2['MAIN_PRODUCTION'].fillna(' ')
ds2.to_csv('/content/Best Shows Netflix.csv', index=False)

import networkx as nx
import pandas as pd
import matplotlib.pyplot as plt
g = nx.from_pandas_edgelist(ds, source='RELEASE_YEAR', target='MAIN_GENRE')
# print number of nodes and edges
print(f'The graph has {g.number_of_nodes()} nodes and {g.number_of_edges()} edges')
# draw network graph
plt.figure(figsize=(10, 10))
pos = nx.spring_layout(g, k=0.5)
nx.draw_networkx(g, pos, font_size=12)
plt.show()

g = nx.from_pandas_edgelist(ds2, source='RELEASE_YEAR', target='MAIN_GENRE')
# print number of nodes and edges
print(f'The graph has {g.number_of_nodes()} nodes and {g.number_of_edges()} edges')
# draw network graph
plt.figure(figsize=(10, 10))
pos = nx.spring_layout(g, k=0.5)
nx.draw_networkx(g, pos, font_size=12)
plt.show()

g = nx.from_pandas_edgelist(ds, source='TITLE', target='RELEASE_YEAR')
print(f"Number of nodes: {g.number_of_nodes()}")
print(f"Number of edges: {g.number_of_edges()}")
print(f"Density: {nx.density(g)}")
print(f"Is directed: {nx.is_directed(g)}")

# draw network graph
plt.figure(figsize=(10, 10))
pos = nx.spring_layout(g, k=0.5)
nx.draw_networkx(g, pos, font_size=5)
plt.show()

import networkx as nx
import matplotlib.pyplot as plt
g = nx.Graph()
g1=nx.Graph()

color_map_movie = []
dict_size={}
dict={}
node_sizes_movie=[]
for node in g:
    if node in ds['RELEASE_YEAR'].values:
        node_sizes_movie.append(3000)
        color_map_movie.append('blue')
    else:
        node_sizes_movie.append(1500)
        color_map_movie.append('red')

g=nx.from_pandas_edgelist(ds, source="TITLE", target="RELEASE_YEAR")
# print basic graph info
print("Graph Information:")
print("Number of nodes: {}".format(nx.number_of_nodes(g)))
print("Number of edges: {}".format(nx.number_of_edges(g)))
print("Graph density: {:.2f}".format(nx.density(g)))

# print node degree info
print("\nNode Degree Information:")
for node in g.nodes():
    print("Node '{}': Degree {}".format(node, g.degree(node)))

plt.figure(figsize=(80, 80))
pos=nx.spring_layout(g, k=0.5)

nx.draw_networkx(g,pos,node_size=node_sizes_movie, node_color=color_map_movie,font_size=25,font_weight='bold',font_color='black')
plt.show()

color_map_shows = []
node_sizes_shows=[]
for node in g1:
    if node in ds2['RELEASE_YEAR'].values:
        node_sizes_shows.append(3000)
        color_map_shows.append('blue')
    else:
        node_sizes_shows.append(1500)
        color_map_shows.append('red')

g1=nx.from_pandas_edgelist(ds2, source="TITLE", target="RELEASE_YEAR")
print(f"Number of nodes: {g.number_of_nodes()}")
print(f"Number of edges: {g.number_of_edges()}")
print(f"Density: {nx.density(g)}")
print(f"Is directed: {nx.is_directed(g)}")

# draw network graph
plt.figure(figsize=(10, 10))
pos = nx.spring_layout(g, k=0.5)
nx.draw_networkx(g, pos, font_size=5)
plt.show()